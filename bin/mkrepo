#!/bin/sh

script="${0##*/}"

. ~/lib/functions.sh

# upstream
GIT_USER="git"
GIT_HOST="rpi3.local"
GIT_ROOT="/home/git/repos"
GIT_UPSTREAM="ssh://${GIT_USER}@${GIT_HOST}/${GIT_ROOT##*/}"

# local
REPO_BASEDIR="${PWD}"
REPO="${1}"
REPO_NAME="${1}.git"
REPO_DESCRIPTION="${2}"


if [ "$#" -lt 2 ] || [ -z "${REPO_DESCRIPTION}" ]; then
  warn "Usage: ${script} <REPO_NAME> <REPO_DESCIPTION>";
  exit 17;
fi

# Is repo already existing on server ?
ssh -t "${GIT_HOST}" test -d "${GIT_ROOT}/${REPO_NAME}"
STATUS=$?
if [ ${STATUS} -eq 0 ]; then
  warn "Repo $REPO already exist on $GIT_HOST, aborting"
  exit ${STATUS}
fi

dbg "GIT_ROOT=$GIT_ROOT\tGIT_UPSTREAM=$GIT_UPSTREAM\tREPO_BASEDIR=$REPO_BASEDIR"
dbg "REPO=$REPO\tREPO_NAME=$REPO_NAME\tREPO_DESCRIPTION=$REPO_DESCRIPTION"

ssh -t "${GIT_USER}@${GIT_HOST}" "mkdir -p ${GIT_ROOT}/${REPO_NAME} && git --bare init ${GIT_ROOT}/${REPO_NAME} && echo ${REPO_DESCRIPTION} > ${GIT_ROOT}/${REPO_NAME}/description"
STATUS="$?"

# failed -> cleanup
if [ ${STATUS} -ne 0 ]; then
  [ -d "${GIT_ROOT}/${REPO}" ] && rm -Rf "${GIT_ROOT}/${REPO}"
  error "Creating repo $REPO on $GIT_HOST failed with status $STATUS"
  exit ${STATUS}
else
  info "Created repo $REPO on $GIT_HOST successfully"
fi

# local repo version controlled -> add remote
if [ -d "${REPO_BASEDIR}/.git" ]; then
  PREV="$PWD"
  cd "${REPO_BASEDIR}"
  git remote rename origin upstream
  git remote add origin ssh://git@rpi3.local/repos/${REPO_NAME}
  git branch --set-upstream-to=origin/master 
  cd "${PREV}"
  info "Found existing repo $REPO"
  info "Moved remote origin to upstream"
  info "Added remote origin ${GIT_UPSTREAM}"
else
  info "No existing git remote found"
  info "Cloning new empty repo $REPO"
  tmp="$(mktemp -d /tmp/${name}.XXXXXX)"
  git clone "${GIT_UPSTREAM}/${REPO_NAME}" "${tmp}/${REPO}"
  STATUS="$?"
  cp -Rf "${tmp}/${repo}/.git" "${REPO_BASEDIR}"
  rm -Rf "${tmp}"
  info "Git repo $repo initialized."
fi

if [ ${STATUS} -ne 0 ]; then
  warn "Script $script exited with error $STATUS"
fi
exit ${STATUS}
