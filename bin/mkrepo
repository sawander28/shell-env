#!/bin/sh

name="${0##*/}"

GIT_USER="git"
GIT_HOST="rpi3.local"
GIT_ROOT="/home/git/repos"
GIT_UPSTREAM="ssh://${GIT_USER}@${GIT_HOST}/${GIT_ROOT##*/}"

GIT_MYREPO="${HOME}/repos"
REPO_ROOT="/home/wandsas/repos"
REPO_OWNER="wandsas"
REPO_OWNER_NAME="Sascha Wander <wandsas>"
REPO_OWNER_MAIL="<sascha.wander@onionmail.com>"
REPO_BASEDIR="${PWD}"
REPO_NAME="${1}.git"
REPO_DESCRIPTION="${2}"

msg(){ printf "\033[1m=> $@\033[m\n"; }
info() { printf "\033[1m=> $@\033[m\n"; }
warn(){ printf "\033[1m\033[33mWARNING: $@\033[m\n"; }
error() { printf "\033[1m\033[31mERROR: $@\033[m\n"; }

if [ "$#" -lt 2 ] || [ -z "${REPO_DESCRIPTION}" ]; then
  warn "Usage: ${name} <REPO_NAME> <REPO_DESCIPTION>";
  exit 17;
fi

# Is repo already existing on bare repo ?
ssh -t "${GIT_HOST}" test -d "${GIT_ROOT}/${REPO_NAME}"
STATUS=$?
if [ ${STATUS} -eq 0 ]; then
  warn "Repository $REPO_NAME already exist on ${GIT_HOST}"
  warn "Code: ${STATUS}"
  exit "${STATUS}"
fi

msg "upstream git root: $GIT_ROOT"
msg "repo name: $REPO_NAME"
msg "repo description: $REPO_DESCRIPTION"

ssh -t ${GIT_USER}@${GIT_HOST} mkdir -p ${GIT_ROOT}/${REPO_NAME} && git --bare init ${GIT_ROOT}/${REPO_NAME} && echo ${REPO_DESCRIPTION} > ${GIT_ROOT}/${REPO_NAME}/description
STATUS="$?"
if [ ${STATUS} -ne 0 ]; then
  error "Creating repo ${REPO_NAME} on ${GIT_HOST} failed."
  error "Code: ${STATUS}"
  exit ${STATUS}
else
  info "Created repo ${REPO_NAME} on ${GIT_HOST} successfully."
fi

# Clone our new repo to tmpdir
repo="${REPO_NAME##*.}"
tmp="$(mktemp -d /tmp/mkrepo.XXXXXX)"
info "Cloning ${GIT_UPSTREAM}/${REPO_NAME} to ${tmp}/$repo tmpdir"
git clone "${GIT_UPSTREAM}/${REPO_NAME}" ${tmp}/$repo >/dev/null 2>&1
STATUS="$?"
if [ ${STATUS} -ne 0 ]; then
	error "Exited with status $STATUS"
  exit ${STATUS}
fi

# Is local repo still version controlled -> grab remote as upstream to our new repo
if [ -d "${REPO_BASEDIR}/.git" ]; then
  upstream=$(git remote show origin ${REPO_BASEDIR} | \
    grep "Fetch URL" | awk '{print $1}')
  info "Found existing git remote and try to add it as upstream."
else
  info "No existing git remote found => Our new empty initialized repo is ready."
fi

if [ -d "${tmp}/${repo}/.git" ]; then
  # add remote upstream to our new initialized repo
  git remote add upstream "${upstream}" "${tmp}/${repo}"
  info "Added git upstream remote ${upstream} to our new initialized repo ${repo}."
  info "Copying our ready repo to ${REPO_BASEDIR}."
  # copy ready initialized repo to local basedir
  cp -Rf "${tmp}/${repo}/.git" "${REPO_BASEDIR}"
  rm -Rf "${tmp}"
  info "Git repo $repo initialized."
fi
[ ${STATUS} != 0 ] && warn "Script ${name} exited with error ${STATUS}."
exit ${STATUS}
